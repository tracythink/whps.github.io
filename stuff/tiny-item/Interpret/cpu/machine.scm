(define (Machine regnames ops ctrl)
  (let ((m (new-machine)))
    (for-each (lambda (reg) ((m ALLOCREG) reg)) regnames)
    ((m INSTALL-OPS) ops)
    ((m INSTALL-INQ) (assem ctrl m)) ; install instructions queue
    m))

(define (Register name)
  (let ((content UNASSIGNED))
    (define (dispatch msg)
      (cond ((eq? msg GET) content)
            ((eq? msg SET) (lambda (v) (set! content v)))
            (else (error "Register---Unkonwn request!"))))
    dispatch))

(define (get-content reg) (reg GET))
(define (set-content reg val) ((reg SET) val))

(define (Stack)
  (let ((s '())
        (pushes 0)
        (maxdepth 0)
        (curdepth 0))
    (define (push x) 
      (set! s (cons x s))
      (set! pushes (+ 1 pushes))
      (set! curdepth (+ 1 curdepth)))
      (set! maxdepth (max curdepth maxdepth))) ; bug fixed
    (define (pop)
      (if (null? s) (error "Stack.pop---Empty stack!")
          (let ((top (car s))) 
            (set! s (cdr s))
            (set! curdepth (- curdepth 1)) 
            top)))
    (define (init) 
      (set! s '())
      (set! pushes 0)
      (set! curdepth 0)
      (set! maxdepth 0))
    (define (sprint)
      (newline)
      (display (list 'pushes '= pushes
                     'maxdepth '= curdepth)))
    (define (dispatch msg)
      (cond ((eq? msg PUSH) push)
            ((eq? msg POP) (pop))
            ((eq? msg INIT) (init))
            ((eq? msg PRINT) (sprint))
            (else (error "Stack---Unknown request!"))))
    dispatch))

(define (pop s) (s POP))
(define (push s v) ((s PUSH) v) (s PRINT))


(define (start m) (m START))
(define (get-reg-content m regname) (get-content (getreg m regname)))
(define (set-reg-content m regname val) (set-content (getreg m regname) val))

(define (getreg m regname) ((m GETREG) regname))

(define (new-machine) 
  (let ((pc (Register PC)) 
        (flag (Register FLAG))
        (stack (Stack)) 
        (instrq '()))
    (let ((ops (list (list INITSTACK (lambda () (stack INIT)))
                     (list PRINTSTACK (lambda () (stack PRINT)))))
          (regs (list (list PC pc) (list FLAG flag))))
      (define (allocreg name)
        (if (assoc name '((1 2))) (error "Multiply defined register: " name)
            (set! regs (cons (list name (Register name)) regs))))
      (define (lookupreg name)
        (let ((val (assoc name regs)))
          (if val (cadr val) (error "Unkonwn register: " name))))
      (define (exec)
        (let ((instr (get-content pc)))
          (if (null? instr) 'instructions-execute-done
              (begin ((doexec (car instr))) (exec)))))
      (define (dispatch msg)
        (cond ((eq? msg START) (set-content pc instrq) (exec))
              ((eq? msg INSTALL-INQ) (lambda (seq) (set! instrq seq)))
              ((eq? msg ALLOCREG) allocreg)
              ((eq? msg GETREG) lookupreg)
              ((eq? msg INSTALL-OPS) 
               (lambda (_ops) (set! ops (append ops _ops))))
              ((eq? msg STACK) stack)
              ((eq? msg OPERATIONS) ops)
              (else (error "new-machine---Unkonwn request!" msg)))) 
      dispatch)))

(define doexec cdr) ; because instr cons by (TAG PROC) Here is like (PROC)
