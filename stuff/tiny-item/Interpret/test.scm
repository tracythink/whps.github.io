#lang scheme

(require rnrs/base-6) 
(require rnrs/mutable-pairs-6)

(include "settings.scm")
(include "expression.scm")
(include "datastruct.scm")
(include "init.scm")
; (include "eval.scm")
(include "lazy.scm")
(include "apply.scm")
(include "indefs.scm")
(include "analyze.scm")

(define (print-env env)
  (define f (first-frame env))
  (define (scan vars vals)
    (cond ((null? vars) (newline))
          (else (display (car vars))
                (display (car vals))
                (newline)
                (scan (cdr vars) (cdr vals)))))
  (cond ((eq? env EMPTY_ENV) (newline))
        (else (scan (frame-vars f) (frame-vals f))
              (print-env (enclose env)))))
; (eval (cons 'cons '(1 2)) GLOBAL_ENV)
(define __IF (list IF_TAG 'a 1 'b))
(define __LAM (list LAMBDA_TAG '(a b) __IF))
(define __ILG (cons '/ '(1 0)))
(define TRY (cons __LAM (list 1 __ILG)))
(eval TRY GLOBAL_ENV)
; (eval __LAM GLOBAL_ENV)
; (eval __IF GLOBAL_ENV)
; (eval 'cons GLOBAL_ENV)
; (eval (list BEGIN_TAG 1 2 444) GLOBAL_ENV)
; (eval (list LAMBDA_TAG (list) (list DEF_TAG 's 1) (list DEF_TAG 'a 1)) GLOBAL_ENV)
; (eval (list LAMBDA_TAG (list) '() GLOBAL_ENV) GLOBAL_ENV)
; (seq.an (list (list DEF_TAG 's 1) (list DEF_TAG 'a 1)))
; (eval (cons COND_TAG (list (cons 'false '(2)) (cons COND_ELSE_TAG '(4)))) GLOBAL_ENV)
; (clauses.expand (list (cons 0 '(2)) (cons COND_ELSE_TAG '(4))))
; (eval (list IF_TAG 1 2 3) GLOBAL_ENV)
; (eval (list DEF_TAG 's 1) GLOBAL_ENV)
; (eval (list ASSIGN_TAG 's 3) GLOBAL_ENV)
; (eval 's GLOBAL_ENV)
; (eval (list QUOTE_TAG "html") GLOBAL_ENV)
; (print-env GLOBAL_ENV)
; (print-env GLOBAL_ENV)
; (eval 1 GLOBAL_ENV)
; (lookup 's '())
; (frame.lookup 's '())
; (eval (cons (list LAMBDA_TAG '(a b c) 'b) (list 1 2 3)) GLOBAL_ENV)
; (define B (cons (list LAMBDA_TAG '(a b c) 'b) (list 1 2 3)))
; (define A (list LET_TAG '((a 1) (b 2) (c 3)) 'a 'b))
; (display (let2lam A))
; (eval A GLOBAL_ENV)

;;; TODO 
; front anyl unimplement (lex, syntax, AST)